'use strict';

var fs = require('fs');

var parseString = require('xml2js').parseString;
// Returns the second occurence of the version number
var parseVersionFromPomXml = function() {
    var version;
    var pomXml = fs.readFileSync('pom.xml', 'utf8');
    parseString(pomXml, function(err, result) {
	version = result.project.version[0];
    });
    return version;
};

module.exports = function(grunt) {

    // Load grunt tasks automatically
    require('load-grunt-tasks')(grunt);

    // Configurable paths
    var globalConfig = {
	// configurable paths
	app : require('./bower.json').appPath || 'app',
	dist : 'src/main/webapp/dist'
    };

    grunt.initConfig({
	// Project settings
	globalConfig : globalConfig,
	pkg : grunt.file.readJSON('package.json'),
	concat : {
	    options : {
		separator : ';'
	    },
	    dist : {
		src : [ '<%= globalConfig.app %>/**/*.js' ],
		dest : '<%= globalConfig.dist %>/<%= pkg.name %>.js'
	    }
	},
	uglify : {
	    options : {
		banner : '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
	    },
	    dist : {
		files : {
		    '<%= globalConfig.dist %>/<%= pkg.name %>.min.js' : [ '<%= concat.dist.dest %>' ]
		}
	    }
	},
	jshint : {
	    options : {
		jshintrc : '.jshintrc'
	    },
	    all : [ 'Gruntfile.js', '<%= globalConfig.app %>/app/**/*.js' ]
	},
	watch : {
	    bower : {
		files : [ 'bower.json' ],
		tasks : [ 'wiredep' ]
	    },
	    ngconstant : {
		files : [ 'Gruntfile.js', 'pom.xml' ],
		tasks : [ 'ngconstant:dev' ]
	    },
	    js :{
		files : [ '<%= jshint.files %>' ],
		tasks : [ 'jshint', 'qunit' ]
	    }
	},
	wiredep : {
	    app : {
		src : [ '<%= globalConfig.app %>/index.html' ],
		ignorePath: '../../../',
		dependencies: true,
	        devDependencies: false, 
	    }
	},
	browserSync : {
	    dev : {
		bsFiles : {
		    src : [ 'src/main/webapp/**/*.html', 'src/main/webapp/**/*.json', 'src/main/webapp/assets/styles/**/*.css', 'src/main/webapp/app/**/*.js',
			    'src/main/webapp/assets/images/**/*.{png,jpg,jpeg,gif,webp,svg}', 'tmp/**/*.{css,js}' ]
		}
	    },
	    options : {
		watchTask : true,
		proxy : 'localhost:8080'
	    }
	},
	clean : {
	    dist : {
		files : [ {
		    dot : true,
		    src : [ '.tmp', '<%= globalConfig.dist %>/*' ]
		} ]
	    },
	    server : '.tmp'
	},
	ngconstant : {
	    options : {
		name : 'testApp',
		deps : false,
		wrap : '\'use strict\';\n// DO NOT EDIT THIS FILE, EDIT THE GRUNT TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n{%= __ngModule %}'
	    },
	    dev : {
		options : {
		    dest : '<%= globalConfig.app %>/app/app.constants.js'
		},
		constants : {
		    ENV : 'dev',
		    VERSION : parseVersionFromPomXml()
		}
	    },
	    prod : {
		options : {
		    dest : '.tmp/app/app.constants.js'
		},
		constants : {
		    ENV : 'prod',
		    VERSION : parseVersionFromPomXml()
		}
	    }
	}
    });

    grunt.registerTask('test', [ 'clean:server', 'jshint', 'wiredep:app', 'ngconstant:dev' ]);

    grunt.registerTask('build', [ 'clean:dist', 'jshint', 'wiredep:app', 'ngconstant:prod', 'concat', 'uglify' ]);
    
    grunt.registerTask('serve', [ 'clean:server', 'jshint', 'wiredep:app', 'ngconstant:dev', 'browserSync', 'watch' ]);
    
    grunt.registerTask('default', [ 'build' ]);

};